FORMAT: 1A
HOST: http://www.google.com

# KC Direct Messaging Platform

This document describes the API for Kimberly-Clark's *Direct Messaging Platform*.

## Media Types

Where applicable this API uses the [HAL+JSON](https://github.com/mikekelly/hal_specification/blob/master/hal_specification.md) media-type to represent resources, states and affordances.

## Response

The common [HTTP Code System](https://github.com/for-GET/know-your-http-well/blob/master/status-codes.md) should be used as response codes for requests.

## Account Types

Please see the Account Types document on the Github repo, [here](http://goo.gl/gVFTsJ).

## Notes

- **F+T created the response objects, please adjust as needed.**
- All IDs (user, company, consumer, brand, etc) will be GUIDs to prevent ID spoofing.
- **DELETE** functions should not remove data they should **date-flag** an item as deleted so as not to skew metrics and to keep an audit trail.


----



# Group Auth

**CodeCafé needs to drive this.** Here's what they've given us so far.

## User Authentication [/account]
### Sign In [POST]

Attempt to log the user into the system.

This resource has the following request parameters:

- `username` Registered email address
- `password` DMP Password
- `remember` [string bool] Specifies whether to remember credentials

+ Request (application/json;charset=UTF-8)

    ```
    {
        "username": "john@example.com",
        "password": "YourPassword",
        "remember": "true"
    }
    ```

+ Response 200 (application/json)

    ```
    {
        "status": "success",
        "user": {
            "id": "25892e17-80f6-415f-9c65-7395632f0223",
            "firstname": "John",
            "lastname": "Smith",
            "display_name": "John Smith",
            "photo_url": "images\/avatars\/john.jpg",
            "role": "admin"
        }
    }
    ```

+ Response 401


### Sign Out [DELETE]

**This end-point was not supplied in the original CodeCafé document, but is required.**

This resource has no parameters, and will delete the current user session and sign the user out of the platform.

It should return 200 if a user session exists, 401 otherwise.

+ Response 200 (application/hal+json)

    ```
    {
        "_link": {
            "next": {
                "href": "/"
            }
        },
        "status": "success"
    }
    ```

+ Response 401



## Account Password [/account/password/{UserID}]

+ Parameters 
    + UserID (required, string, `25892e17-80f6-415f-9c65-7395632f0223`) ... User's GUID

### Reset Password [POST]

This will generate a single use password change token. The token should ideally be sent directly to
the user as part of a confirmation link.

This should *not* deactivate the account or the current password, and the token should be cleared if the user signs in successfully with the current password.

+ Response 200

### Change Account Password  [PUT]

This will change an account's password if the token is a match.

The Token is sent to the user via email, and will probably be a `GET` variable on the 'change password' page.

- `Token`
- `New Password`

+ Request

    ```
    {
        "token": "TheToken",
        "password": "NewPassword"
    }
    ```

+ Response 200 (application/hal+json)

    ```
    {
        "_link": {
            "next": {
                "href": "/"
            }
        },
        "status": "success",
        "message": "Password successfully changed. You can now sign in with your new password."
    }
    ```

# Group User Functionality

Users are **not** Consumers; Users can log into the platform to manage and update the platform.

## User List [/users/]

### Get a list of all platform users [GET]

+ Response 200 (application/json;charset=UTF-8)

    ```
    {
        "users": [{
            "firstname": "Casper",
            "lastname": "Odendaal",
            "email": "casper@flintntinder.com",
            "mobile": "123456789",
            "title": "Web Designer",
            "role": "super",
            "avatar": "images\/avatars\/casper.jpg",
            "brands": ["469bbea6-2532-4bf1-84b2-af656da10325","d262e101-d37d-47aa-b0f2-7200da6e43f1"]
        }, {
            "firstname": "Emmanuel",
            "lastname": "Matsiyana",
            "email": "emmanuel@flintntinder.com",
            "mobile": "123456789",
            "title": "Web Designer",
            "role": "admin",
            "avatar": "images\/avatars\/emmanuel.jpg",
            "brands": ["d262e101-d37d-47aa-b0f2-7200da6e43f1", "40c03869-6424-4fab-b56a-797eb603e7fa"]
        }, {
            "firstname": "Willem",
            "lastname": "Labu",
            "email": "willem@flintntinder.com",
            "mobile": "123456789",
            "title": "TD",
            "role": "company",
            "avatar": "images\/avatars\/willem.jpg",
            "brands": ["40c03869-6424-4fab-b56a-797eb603e7fa"]
        }, {
            "firstname": "Lianie",
            "lastname": "Potgieter",
            "email": "lianie@flintntinder.com",
            "mobile": "123456789",
            "title": "Art Director",
            "role": "brand",
            "avatar": "images\/avatars\/lianie.jpg",
            "brands": ["40c03869-6424-4fab-b56a-797eb603e7fa", "d262e101-d37d-47aa-b0f2-7200da6e43f1"]
        }, {
            "firstname": "Nimay",
            "lastname": "Parekh",
            "email": "nimay@flintntinder.com",
            "mobile": "123456789",
            "title": "MD",
            "role": "basic",
            "avatar": "images\/avatars\/nimay.jpg",
            "brands": ["469bbea6-2532-4bf1-84b2-af656da10325"]
        }]
    }
    ```

## User [/user/{UserID}]

+ Model (application/hal+json)

    HAL+JSON representation of the User in the database.

    + Body
    
        ```
        {
            "_links": {
                "self": {
                    "href": "/user/25892e17-80f6-415f-9c65-7395632f0223"
                }
            },
            "id": "25892e17-80f6-415f-9c65-7395632f0223",
            "firstname": "John",
            "lastname": "Smith",
            "display_name": "John Smith",
            "email": "john@example.com",
            "mobile": "123456789",
            "photo_url": "https:\/\/example.com\/john.jpg",
            "country": {
                "name": "South Africa",
                "code": "ZA",
                "dialcode": "27"
            },
            "language": {
                "name": "English",
                "code": "en"
            },
            "created_at": "2014-04-14T02:15:15Z",
            "last_active": "2014-04-14T02:15:15Z",
            "account": {
                "type": 1,
                "super": true,
                "admin": false,
                "company": false,
                "agency": false,
                "active": true
            },
            "companies": [
                {
                    "id": "a53e98e4-0197-4513-be6d-49836e406aaa",
                    "name": "Kimberly-Clark"
                }
            ],
            "brands": [
                {
                    "id": "e33898de-6302-4756-8f0c-5f6c5218e02e",
                    "name": "Huggies"
                }
            ]
        }
        ```
        
### Create a User [POST]

This is an administrative function.

Only [account types](http://goo.gl/gVFTsJ) [1, 2, 3] should be able to create new users, and only for account types lower in heirarchy than themselves.

401 should be returned if an attempt is made to create a user by an unauthorized account.

This end-point requires the following parameters to be sent:

- `firstname` (string)
- `lastname` (string)
- `email` (string)
- `mobile` (string)
- `account` (number)
- `country` (object of strings)
- `language` (object of strings)
- `companies` (array of strings)
- `brands` (array of strings)

+ Request (application/json)

    ```
    {
        "firstname": "John",
        "lastname": "Smith",
        "email": "john@example.com",
        "mobile": "123456789",
        "account": 1,
        "country": {
            "name": "South Africa",
            "code": "ZA",
            "dialcode": "27"
        },
        "language": {
            "name": "English",
            "code": "en"
        },
        "companies": ["a53e98e4-0197-4513-be6d-49836e406aaa"],
        "brands": ["e33898de-6302-4756-8f0c-5f6c5218e02e"]
    }
    ```

+ Response 200 (application/hal+json)

    [User][]

+ Response 401


### View a User [GET]

This is an administrative function.

Only [account types](http://goo.gl/gVFTsJ) [1, 2, 3] should be able to view users, and only for account types lower in heirarchy than themselves.

Get a specific User's details.

+ Parameters 
    + UserID (required, string, `25892e17-80f6-415f-9c65-7395632f0223`) ... User's GUID

+ Response 200

    [User][]

### Remove a User [DELETE]

This is an administrative function.

Only [account types](http://goo.gl/gVFTsJ) [1, 2, 3] should be able to remove users, and only for account types lower in heirarchy than themselves.

Deactivate a specific user.

+ Parameters 
    + UserID (required, string, `25892e17-80f6-415f-9c65-7395632f0223`) ... User's GUID

+ Response 200 (application/json)

    ```
    {
        "status": "success",
        "message": "User has been deactivated.",
        "user": {
            "firstname": "John",
            "lastname": "Smith",
            "display_name": "John Smith",
            "photo_url": "https:\/\/example.com\/john.jpg"
        }
    }
    ```

## User Metrics [/user/metrics/{UserID}]

**NOTE [WL]**

Not sure what metrics we'll need to capture per User. Need some more information here, please clarify.

+ Parameters 
    + UserID (required, string, `25892e17-80f6-415f-9c65-7395632f0223`) ... User's GUID

### Show User Metrics [GET]

+ Response 200

# Group Messaging

## Send Message [/user/message/{UserID}]
+ Parameters 
    + UserID (required, string, `25892e17-80f6-415f-9c65-7395632f0223`) ... User's GUID

### Send a message [POST]

Send a message to a user.

- `title`
- `content`

+ Request

    ```
    {
        "title": "Message title",
        "content": "Message content to send to the selected user."
    }
    ```

+ Response 200 (application/json)

    ```
    {
        "status": "success",
        "message": "Your message was sent."
    }
    ```




## Get Message [/user/{UserID}/messages{?id}{&page}]

Get all or one specific message that has been sent to a User.

**We need to work out paging** - the below is probably not correct.

+ Parameters 
    + UserID (required, string, `25892e17-80f6-415f-9c65-7395632f0223`) ... User's GUID
    + id (optional, string, `11cdd494-de5b-460e-9ddf-4e84bad6f596`) ... Message's GUID
    + page (optional, string, `1`) ... Page number

### Get Messages [GET]

+ Response 200 (application/hal+json)

    ```
    {
        "_link": {
            "self": {
                "href": "/user/{UserID}/messages?MessageID={MessageID}"
            },
            "next": {
                "href": "/user/{UserID}/messages?MessageID={NextMessageID}"
            },
            "previous": {
                "href": "/user/{UserID}/messages?MessageID={PreviousMessageID}"
            }
        },
        "_paging": {
            "next": {
                "href": "/user/{UserID}/messages?page={page+1}"
            },
            "previous": {
                "href": "/user/{UserID}/messages?page={page-1}"
            }
        },
        "messages": [
            {
                "author": {
                    "id": "deb17e15-d47c-449f-b1b0-4d55247d153f",
                    "display_name": "Jane Doe",
                    "photo_url": "https:\/\/example.com\/jane.jpg"
                },
                "title": "Message title",
                "content": "Message content that was sent to user.",
                "sent": "2014-04-14T02:15:15Z",
                "opened": "2014-04-14T02:20:15Z",
                "deleted": false
            }
        ],
        "total": 1,
        "current_page": 1,
        "total_pages": 1
    }
    ```


# Group Company

## Company [/company/{guid}]

+ Model (application/hal+json)

    HAL+JSON representation of the Company in the database.

    + Body
    
        ```
        {
            "_links": {
                "self": {
                    "href": "/company/a53e98e4-0197-4513-be6d-49836e406aaa"
                }
            },
            "id": "a53e98e4-0197-4513-be6d-49836e406aaa",
            "name": "Kimberly-Clark",
            "photo_url": "https:\/\/example.com\/kc.jpg",
            "created_at": "2014-04-14T02:15:15Z",
            "brands": [
                {
                    "id": "e33898de-6302-4756-8f0c-5f6c5218e02e",
                    "name": "First Brand"
                },
                {
                    "id": "8c3df7e7-bae8-4772-bb49-9629254f6198",
                    "name": "Second Brand"
                }
            ],
            "active": true
        }
        ```

### Create a Company [POST]

This is an administrative function.

Only [Super Adminstrators](http://goo.gl/gVFTsJ) should be able to create new Companies.

- `Name` (string)

+ Request

    ```
    {
        "name": "New Company Name"
    }
    ```

+ Response 200 (application/hal+json)

    ```
    {
        "_link": {
            "self": {
                "href": "/company/a53e98e4-0197-4513-be6d-49836e406aaa"
            },
            "next": {
                "href": "/brand/create"
            }
        },
        "status": "success",
        "message": "New Company Name has been created. You can now add a brand to it!",
        "company": {
            "id": "a53e98e4-0197-4513-be6d-49836e406aaa"
            "name": "New Company Name"
        }
    }
    ```

### View a Company [GET]

Get the properties of a certain company.

+ Parameters 
    + guid (required, string, `a53e98e4-0197-4513-be6d-49836e406aaa`) ... The Company GUID

+ Response 200
[Company][]


### Delete Company [DELETE]

This is an administrative task.

Only [Super Adminstrators](http://goo.gl/gVFTsJ) accounts should be able to delete a company.

Sets the Company `active` flag to `false`.

+ Parameters 
    + guid (required, string, `a53e98e4-0197-4513-be6d-49836e406aaa`) ... The Company GUID

+ Response 200 (application/json)

    ```
    {
        "status": "success",
        "message": "The Company has been deactivated."
    }
    ```

## Company Metrics [/company/{guid}/metrics/]

**WIP**

+ Model (application/hal+json)

    HAL+JSON representation of the Company + it's metrics in the database.

    + Body
    
        ```
        {
            "_links": {
                "self": {
                    "href": "/company/a53e98e4-0197-4513-be6d-49836e406aaa"
                }
            },
            "id": "a53e98e4-0197-4513-be6d-49836e406aaa",
            "name": "Kimberly-Clark",
            "photo_url": "https:\/\/example.com\/kc.jpg",
            "created_at": "2014-04-14T02:15:15Z",
            "brands": [
                {
                    "id": "e33898de-6302-4756-8f0c-5f6c5218e02e",
                    "name": "First Brand",
                    "users": 3,
                    "subscribers": 12879,
                    "campaigns": 23,
                    "programs": 7
                },
                {
                    "id": "8c3df7e7-bae8-4772-bb49-9629254f6198",
                    "name": "Second Brand",
                    "users": 5,
                    "subscribers": 483628,
                    "campaigns": 75,
                    "programs": 15
                }
            ],
            "active": true
        }
        ```

### View Company Metrics [GET]

- `Company ID`
- `Name`
- `Number of brands`
- `Number of users`
- `Number of subscribers`
- `Number of active campaigns`
- `Number of active programs`

+ Parameters 
    + guid (required, string, `a53e98e4-0197-4513-be6d-49836e406aaa`) ... The Company GUID

+ Response 200

    [Company Metrics][]

# Group Brand

## Brand [/brand/{guid}]

+ Model (application/hal+json)

    HAL+JSON representation of a Brand in the database.

    + Body
    
        ```
        {
            "_links": {
                "self": {
                    "href": "/brand/e33898de-6302-4756-8f0c-5f6c5218e02e"
                }
            },
            "id": "e33898de-6302-4756-8f0c-5f6c5218e02e",
            "name": "Huggies",
            "photo_url": "https:\/\/example.com\/huggies.jpg",
            "created_at": "2014-04-14T02:15:15Z",
            "companies": [
                {
                    "id": "a53e98e4-0197-4513-be6d-49836e406aaa",
                    "name": "Kimberly-Clark"
                }
            ],
            "active": true
        }
        ```

### Create Brand [POST]

This is an administrative task.

Only [account types](http://goo.gl/gVFTsJ) [1, 2, 3] should be able to create a new brand, and assign it to a company.

Furthermore, *company* accounts should only be able to create brands for their own company.

- `Name` (string)

+ Request

    ```
    {
        "name": "New Brand Name"
    }
    ```

+ Response 200 (application/hal+json)

    ```
    {
        "_link": {
            "self": {
                "href": "/brand/e33898de-6302-4756-8f0c-5f6c5218e02e"
            },
            "campaign": {
                "href": "/campaigns/create"
            },
            "program": {
                "href": "/programs/create"
            },
            "company": {
                "href": "/company/a53e98e4-0197-4513-be6d-49836e406aaa"
            }
        },
        "status": "success",
        "message": "{New Brand Name} has been created. You can now add create campaigns or programs for it!",
        "brand": {
            "id": "e33898de-6302-4756-8f0c-5f6c5218e02e"
            "name": "New Brand Name"
        }
    }
    ```


### View Brand [GET]

Get the properties of a certain brand.

+ Parameters 
    + guid (required, string, `e33898de-6302-4756-8f0c-5f6c5218e02e`) ... The Brand GUID

+ Response 200

    [Brand][]

### Delete Brand [DELETE]

This is an administrative task.

Only [account types](http://goo.gl/gVFTsJ) [1, 2, 3] should be able to delete a brand.

Sets the Brand `active` flag to `false`.

+ Parameters 
    + guid (required, string, `e33898de-6302-4756-8f0c-5f6c5218e02e`) ... The Company GUID

+ Response 200 (application/json)

    ```
    {
        "status": "success",
        "message": "The Brand has been deactivated."
    }
    ```

## Brand Metrics [/brand/metrics/{guid}]

**WIP**


### View Brand Metrics [GET]
Please update field names

- `Brand ID`
- `Name`
- `Number of users`
- `Number of subscribers`
- `Number of incomplete subscribers` This will be calculated as a consumer that does not have all the prerequisite data fields (see `Consumer`)
- `Number of active campaigns`
- `Number of pending campaigns`
- `Number of complete campaigns`
- `Number of active programs`
- `Number of pending programs`
- `Number of complete programs`

+ Response 200 (application/json;charset=UTF-8)

    ```
        {
        "brand": {
        "id": "WEE444-TRTRTX-4XEXER-34RXWE43-3FXHUXJCIUJ-2132",
        "name": "Baby Soft",
        "consumers": 987,
        "incompleteconsumers": "34",
        "activecampaigns": "4",
        "pendingcampaigns": "3",
        "completecampaigns": "2",
        "activeprograms": "4",
        "pendingprograms": "3",
        "completeprograms": "2",

        "genders": {
                "female": "23",
                "unknown": "45",
                "male": "15"
                },
        "age": {
                "16-24": "23",
                "25-34": "45",
                "35-44": "15",
                "45": "10",
                "unknown": "7"
                },
        "locations": {
                "limpopo": "23",
                "mpumalanga": "20",
                "gauteng": "7",
                "westerncape": "13",
                "northerncape": "17", 
                "easterncape": "15",
                "kwazulunatal": "5",
                "freestate": "18",
                "northwest": "24",
                "unknown": "3"
                },
        "status": { 
                "marriedcouples": "23",
                "marriedwithkids": "20", 
                "single": "7", 
                "singleparent": "13",
                "pregnant": "17", 
                "unknown": "15"
                },
        "activationchannel": {
                "email": "63",
                "sms": "37"
                },
        "responsechannel": {
                "email": "50",
                "sms": "63"
                },
        "activity": {
                "growth": "2.3",
                "active": "20.9",
                "inactive": "0.7",
                "new": "630",
                "dupes": "17",
                "unsubs": "5"
                },
        "tiers": {
                 "A": "9", "B": "22",
                  "C": "56",
                  "undefined": "13"
                }
            }
        }
    ```
    

# Group Campaigns

## Campaign [/campaigns/{guid}]

**WIP - INCOMPLETE**

+ Model (application/hal+json)

    HAL+JSON representation of a Campaign in the database.

    + Body
    
        ```
        {
            "_links": {
                "self": {
                    "href": "/campaign/da517c76-62f7-48ff-ba0a-05ca510b261e"
                },
                "segment": {
                    "href": "/segment/da517c76-62f7-48ff-ba0a-05ca510b261e",
                    "description": "A quick-link to view the database segment for this campaign."
                }
            },
            "id": "da517c76-62f7-48ff-ba0a-05ca510b261e",
            "name": "Campaign Name",
            "description": "A description about this specific campaign.",
            "photo_url": "https:\/\/example.com\/campaignthumb.jpg",
            "created_at": "2014-04-14T02:15:15Z",
            "start_date": "2014-04-16T08:00:00Z",
            "end_date": "2015-01-12T16:00:00Z",
            "active": true,
            "archived": false,
            "status": "[pending, checked, approved, paused, archived]",
            "companies": [
                {
                    "id": "a53e98e4-0197-4513-be6d-49836e406aaa",
                    "name": "Kimberly-Clark"
                }
            ],
            "brands": [
                {
                    "id": "e33898de-6302-4756-8f0c-5f6c5218e02e",
                    "name": "Huggies"
                }
            ],
            "channels": {
                "activation": {
                    "sms": {

                    },
                    "email": true
                },
                "engagement": {
                    "smsshortcode": false,
                    "webform": true
                }
            },
            "segment_rules": "< A JSON OBJECT ARRAY OF THE SEGMENTATION METRICS - STORED AS A STRING >",
        }
        ```

### Create Campaign [POST]

Please update field names

- `Campaign ID`
- `Company ID`
- `Brand ID`
- `Name`
- `Description`
- `Start date & time`
- `End date & time` (optional)
- `Activation channels`
- `Engagement channels`
- `SMS message` (optional)
- `SMS response message` (optional)
- `SMS opt-out` (optional)
- `Email Subject line` (optional)
- `View online text` (optional)
- `Unsubscribe text` (optional)
- `Status` (optional)

+ Response 200

### View Campaign [GET]

- `Campaign ID`
- `Company ID`
- `Brand ID`
- `Name`
- `Description`
- `Start date & time`
- `End date & time` (optional)
- `Activation channels`
- `Engagement channels`
- `SMS message` (optional)
- `SMS response message` (optional)
- `SMS opt-out` (optional)
- `Email Subject line` (optional)
- `View online text` (optional)
- `Unsubscribe text` (optional)
- `Status` (optional)

+ Parameters 
    + guid (required, string, `da517c76-62f7-48ff-ba0a-05ca510b261e`) ... Campaign GUID

+ Response 200

### Delete Campaign [DELETE]

Please update field names

- `Campaign ID`
- `Company ID`
- `Brand ID`
- `Name`
- `Description`
- `Start date & time`
- `End date & time` (optional)
- `Activation channels`
- `Engagement channels`
- `SMS message` (optional)
- `SMS response message` (optional)
- `SMS opt-out`
- `Email Subject line` (optional)
- `View online text` (optional)
- `Unsubscribe text` (optional)
- `Status` (optional)
+ Response 200

## Campaign Assests [/campaigns/assets/{guid}]

Please update field names

- `Asset file`. A zip file containing all your email assets, the zip file must contain at least `email.htm`, `unsubscribe.htm` and preferably `email.txt` for the plain text version.
- Image assets should be packaged in the zip file in the root folder. The `unsubscribe.htm` is a page users will view when unsubscribing, and should contain your corporate identity.
- Files with the same name will be automatically overwritten.

+ Parameters 
    + guid (required, string) ... 


### View Campaign Assets [POST]

+ Response 200

### View Campaign Assets [GET]

+ Response 200

### View Campaign Assets [DELETE]

+ Response 200

## Campaign Subscriber [/campaigns/subscriber/{guid}]
+ Parameters 
    + guid (required, string) ... 

### Create Campaign Subscriber [POST]

Please update field names

- `Subscriber ID`

+ Response 200

### Delete Campaign Subscriber [DELETE]

Please update field names

- `Subscriber ID`
+ Response 200

## Campaign Subscribers [/campaigns/subscribers/{guid}]

This will add or remove multiple users to/from a campaign. A list of all currently assigned users may
also be retrieved. A subscriber will only ever be added to a campaign once.

+ Parameters 
    + guid (required, string) ... 


### Create Campaign Subscribers [POST]

Please update field names

- `Subscriber ID`

+ Response 200

### View Campaign Subscribers [GET]

Please update field names

- `Subscriber ID`
+ Response 200

### Delete Campaign Subscribers [DELETE]

Please update field names

- `Subscriber ID`
+ Response 200

## Campaign Responses [/campaigns/responses/{guid}]
This will return the current metrics for a campaign.


+ Parameters
    + guid (string,required) ...

### View Campaign Responses [GET]

Please update field names

- `Date of response`
- `Type of response` (email, sms or USSD)
- `Consumer ID`
- `Response data` (this will include all fields captured for the subscriber

+ Response 200

## Campaign Metrics [/campaigns/metrics/{guid}]
+ Parameters 
    + guid (required, string) ... 

### View Campaign Metrics [GET]

Please update field names

- `Total sent`
- `Total bounced`
- `Total unique opens`
- `Total clicks`
- `Total unique clicks`
- `Total modified`
- `Total unsubscribed`
- `Total delivered`
- `Percentage bounced`
- `Percentage delivered`
- `Percentage opened`
- `Percentage clicked`
- `Percentage clicked to open`
- `Percentage modified`
- `Percentage unsubscribed`
- `SMSs sent`
- `SMSs bounced`
- `SMSs unsubscribed`
- `SMSs percentage bounced`
- `SMSs percentage unsubscribed`

+ Response 200

# Group Programs

## Programs [/programs/{programID}]

+ Parameters
    + programID (string,required) ...

### Create a Program [POST]

Please update field names

- `Program ID`
- `Company ID`
- `Brand ID`
- `Name`
- `Description`
- `Start date & time`
- `End date & time (optional)`
- `Engagement channels`
- `SMS opt-out (optional)`
- `1Cadence field`
- `1Status (optional)`

+ Response  200

### View a Program [GET]

Please update field names

- `Program ID`
- `Company ID`
- `Brand ID`
- `Name`
- `Description`
- `Start date & time`
- `End date & time (optional)`
- `Engagement channels`
- `SMS opt-out (optional)`
- `1Cadence field`
- `1Status (optional)`

+ Response  200

### Delete a Program [DELETE]

Please update field names

- `Program ID`
- `Company ID`
- `Brand ID`
- `Name`
- `Description`
- `Start date & time`
- `End date & time (optional)`
- `Engagement channels`
- `SMS opt-out (optional)`
- `1Cadence field`
- `1Status (optional)`

+ Response  200

## Programs Messaging [/programs/message/{programID}]

+ Parameters
    + programID (string,required) ...

### Create Programs Message [POST]

Please update fields

- `Message ID`
- `Program ID`
- `Message number`
- `Condition`

+ Response 200

### View Programs Message [GET]

Please update fields

- `Message ID`
- `Program ID`
- `Message number`
- `Condition`

+ Response 200

### Delete Programs Message [DELETE]

Please update fields

- `Message ID`
- `Program ID`
- `Message number`
- `Condition`

+ Response 200




## Programs SMS [/programs/assets/sms/{messageID}]
This adds a SMS message to a program message

 + Parameters 
     + messageID (required, string) ... 

### Create Program Message [POST]

- `SMS Message`
+ Response 200

### View Program Message [GET]

- `SMS Message`
+ Response 200

### Delete Program Message [DELETE]

- `SMS Message`
+ Response 200




## Programs Email Assets [/programs/assets/email/{messageID}]
This adds email assets to a program message

 + Parameters 
     + messageID (required, string) ... 

### Create Program Email Assets [POST]
- `Asset file`. A zip file containing all your email assets, the zip file must contain at least "email.htm"and preferably "email.txt" for the plain text version. Image assets should be packaged in the zip file in the root folder.
+ Response 200

### View Program Email Assets [GET]
- `Asset file`. A zip file containing all your email assets, the zip file must contain at least "email.htm"and preferably "email.txt" for the plain text version. Image assets should be packaged in the zip file in the root folder.
+ Response 200

### Delete Program Email Assets [DELETE]
- `Asset file`. A zip file containing all your email assets, the zip file must contain at least "email.htm"and preferably "email.txt" for the plain text version. Image assets should be packaged in the zip file in the root folder.
+ Response 200




## Programs Unsubscribe [/programs/unsubscribe/{programID}]
This adds an unsubscribe email message to a program

 + Parameters 
     + programID (required, string) ... 

### Unsubscribe from Program Email[POST]
- `Asset file`. A zip file containing all your email assets, the zip file must contain at least "email.htm"and preferably "unsubscribe.txt" for the plain text version. Image assets should be packaged in the zip file in the root folder.
+ Response 200

### View Unsubscribe from Program Email [GET]
- `Asset file`. A zip file containing all your email assets, the zip file must contain at least "email.htm"and preferably "unsubscribe.txt" for the plain text version. Image assets should be packaged in the zip file in the root folder.
+ Response 200

### Delete Unsubscribe from Program Email [DELETE]
- `Asset file`. A zip file containing all your email assets, the zip file must contain at least "email.htm"and preferably "unsubscribe.txt" for the plain text version. Image assets should be packaged in the zip file in the root folder.
+ Response 200




## Programs Subscriber [/programs/subscriber/{programID}]
This will add or remove a single user to a program. A subscriber will only ever be added to a program once.

 + Parameters 
     + programID (required, string) ... 

### Subscribe from Program[POST]
- `Subscriber ID`
+ Response 200

### Delete Subscribe from Program [DELETE]
- `Subscriber ID`
+ Response 200





## Programs Subscribers [/programs/subscribers/{programID}]
This will add or remove multiple users to/from a program. A list of all currently assigned users may also be retrieved. A subscriber will only ever be added to a program once.

 + Parameters 
     + programID (required, string) ... 

### Create Program Subscribers[POST]
- `Subscriber ID`
+ Response 200

### View Program Subscribers[GET]
- `Subscriber ID`
+ Response 200

### Delete Program Subscribers[DELETE]
- `Subscriber ID`
+ Response 200




## Program Metrics [/programs/metrics/{programID}]

This will retrieve the overall metrics for a program
+ Parameters
    + programID (string,required) ...

### View Program Metrics[GET]

- `Total sent`
- `Total bounced`
- `Total unique opens`
- `Total clicks`
- `Total unique clicks`
- `Total modified`
- `Total unsubscribed`
- `Total delivered`
- `Percentage bounced`
- `Percentage delivered`
- `Percentage opened`
- `Percentage clicked`
- `Percentage clicked to open`
- `Percentage modified`
- `Percentage unsubscribed`
- `SMSs sent`
- `SMSs bounced`
- `SMSs unsubscribed`
- `SMSs percentage bounced`
- `SMSs percentage unsubscribed`
+ Response 200





## Program Message Metrics [/programs/metrics/message/{programID}]

This will retrieve the metrics for an indivIDual program message.
+ Parameters
    + programID (string,required) ...

### View Program Metrics[GET]
- `Total sent`
- `Total bounced`
- `Total unique opens`
- `Total clicks`
- `Total unique clicks`
- `Total modified`
- `Total unsubscribed`
- `Total delivered`
- `Percentage bounced`
- `Percentage delivered`
- `Percentage opened`
- `Percentage clicked`
- `Percentage clicked to open`
- `Percentage modified`
- `Percentage unsubscribed`
- `SMSs sent`
- `SMSs bounced`
- `SMSs unsubscribed`
- `SMSs percentage bounced`
- `SMSs percentage unsubscribed`

+ Response 200





# Group Consumer

## Consumer [/consumer/{guid}]

+ Model (application/hal+json)

    HAL+JSON representation of a basic Consumer in the database.

    + Body
    
        ```
        {
            "_links": {
                "self": {
                    "href": "/consumer/37a06561-dc91-48fc-a638-96ae97a4c8f3"
                },
                "fields": {
                    "array": [ "base", "title", "dob", "consumerTier", "maritalStatus", "..etc" ],
                    "description": "Other populated (or calculated) fields of meta-data that we have in the database about this particular consumer.\n\nTo GET this meta-data from the database, see the /consumer/{guid}/{fieldID} endpoint."
                }
            },
            "id": "37a06561-dc91-48fc-a638-96ae97a4c8f3",
            "firstname": "James",
            "lastname": "Johnson",
            "email": "james@example.com",
            "mobile": "323456789",
            "gender": "m",
            "age": "31",
            "last_active": "2014-04-16T09:12:00Z",
            "created_at": "2014-04-14T02:15:15Z",
            "status": true,
            "country": {
                "name": "South Africa",
                "code": "ZA",
                "dialcode": "27"
            },
            "language": {
                "name": "English",
                "code": "en"
            }
        }
        ```

### Create a Consumer [POST]

- `firstname` `*`
- `lastname` `*`
- `email` `**`
- `mobile` `**`
- `gender` (nullable)
- `age` (nullable)
- `last_active` (default: NOW())
- `country` (not required, has default: See API Response)
- `language` (not required, has default: See API Response)

`*` Required
`**` _Either or both_ `email` or `mobile` is required. Both cannot be blank.

+ Request (application/json)

```
{
    "firstname": "James",
    "lastname": "Johnson",
    "email": "james@example.com",
    "mobile": "323456789",
    "gender": "m",
    "age": "31"
}
```

+ Response 200

    [Consumer][]

### View a Consumer [GET]

Get a basic view of any specific Consumer.

+ Parameters 
    + guid (required, string, `37a06561-dc91-48fc-a638-96ae97a4c8f3`) ... The Consumer GUID

+ Response 200

    [Consumer][]

### Deactivate a Consumer [DELETE]

Get a basic view of any specific Consumer.

+ Parameters 
    + guid (required, string, `37a06561-dc91-48fc-a638-96ae97a4c8f3`) ... The Consumer GUID

+ Response 200 (application/json)

    ```
    {
        "status": "success",
        "message": "Consumer has been deactivated.",
        "user": {
            "firstname": "James",
            "lastname": "Johnson"
        }
    }
    ```





## Consumer Engagement Campaigns [/consumer/engagement/campaigns/{guid}]
 + Parameters
     + guid (required, string) ...

### Create a Consumer engagement Campaign [POST]
- `Campaign ID`
- `Date of engagement`
- `Unsubscribed`

+ Response 200

### View a Consumer engagement Campaign [GET]
- `Campaign ID`
- `Date of engagement`
- `Unsubscribed`

+ Response 200

### Delete a Consumer engagement Campaign [DELETE]
- `Campaign ID`
- `Date of engagement`
- `Unsubscribed`

+ Response 200




## Consumer Fields [/consumer/{guid}/{fieldID}]
Allows you to add, read or delete any meta data for a single consumer specified by fieldname
 + Parameters
     + guid (required, string) ...

### Create a Consumer field [POST]
- `Consumer ID`
- `Field value`

+ Response 200

### View a Consumer field [GET]
- `Consumer ID`
- `Field value`

+ Response 200

### Delete a Consumer field [DELETE]
- `Consumer ID`
- `Field value`

+ Response 200







# Group Consumers

## Consumers Company List [/consumers/company/{guid}]

### View Consumers By Company [GET]

+ Parameters
     + guid (string, required, `a53e98e4-0197-4513-be6d-49836e406aaa`) ... The Company GUID

+ Response 200





## Consumers Brand List [/consumers/brand/{guid}]

+ Parameters
    + guid (string, required, `e33898de-6302-4756-8f0c-5f6c5218e02e`) ... The Brand GUID

### View Consumers By Brand [GET]

- `Consumer Id`
- `First name`
- `Last name`
- `Email address`
- `Mobile`
- `Gender`
- `Title`
- `Date of birth`
- `Last active`
- `Country code`
- `Language code`
- `All existing consumer meta data`

+ Response 200




## Consumers Campaign List [/consumers/campaign/{guid}]

+ Parameters
    + guid (string, required) ... The Campaign GUID

### View Consumers By Campaign [GET]

- `Consumer Id`
- `First name`
- `Last name`
- `Email address`
- `Mobile`
- `Gender`
- `Title`
- `Date of birth`
- `Last active`
- `Country code`
- `Language code`
- `All existing consumer meta data`

+ Response 200




## Consumers Program List [/consumers/program/{programId}]

+ Parameters
    + programId (string, required) ...

### View Consumers By Program [GET]

- `Consumer Id`
- `First name`
- `Last name`
- `Email address`
- `Mobile`
- `Gender`
- `Title`
- `Date of birth`
- `Last active`
- `Country code`
- `Language code`
- `All existing consumer meta data`

+ Response 200
